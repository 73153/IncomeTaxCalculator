
#ifndef GAMELAYER_H_
#define GAMELAYER_H_

#define MAX_ITEM 3
#include "Box2D.h"
#include "MyPaddle.h"
#include "../Ball/Ball.h"
#include "SettingLayer.h"
#include "ScoreData.h"
#include "EnlargeItem.h"
#include "ContactListener.h"
#include <cstdlib>
#include <ctime>
#include <cmath>
#include "../PowerUp/ReverseXItem.h"
#include "../PowerUp/ReverseYItem.h"
#include "../PowerUp/BulletItem.h"
#include "../PowerUp/DoubleItem.h"
#include "Item.h"
#include "../PowerUp/FreezeItem.h"
#include "../PowerUp/ShortenItem.h"
#include "../PowerUp/BonusLife.h"
#include "SkewingItem.h"
#include <list>
#include <iostream>
#include "cocos2d.h"
#include "cocos-ext.h"
#include"Brick.h"
#include "../PowerUp/Bullet.h"
#define PTM_RATIO 32.0
using namespace cocos2d;

class GameLayer: public cocos2d::CCLayer
,public cocos2d::extension::CCBSelectorResolver
,public cocos2d::extension::CCBMemberVariableAssigner
,public cocos2d::extension::CCNodeLoaderListener

{
    
public:
    CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(GameLayer, create);
    
   GameLayer();
    ~GameLayer();
    
    //CCB methods...
    virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(cocos2d::CCObject * pTarget, const char * pSelectorName);
    virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(cocos2d::CCObject * pTarget, const char * pSelectorName);
    virtual bool onAssignCCBMemberVariable(cocos2d::CCObject * pTarget, const char * pMemberVariableName, cocos2d::CCNode * pNode);
    virtual bool onAssignCCBCustomProperty(CCObject* pTarget, const char* pMemberVariableName, cocos2d::extension::CCBValue* pCCBValue);
    virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
    virtual cocos2d::SEL_CallFuncN onResolveCCBCCCallFuncSelector(CCObject * pTarget, const char* pSelectorName);
    
    cocos2d::extension::CCBAnimationManager *mAnimationManager;


	virtual bool init();
    virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent);
	virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent);
	virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent);
    virtual void  ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent);
	void restartConfirm();
	void didAccelerate(CCAcceleration* pAccelerationValue);
	virtual void restart(cocos2d::CCObject * pSender);
    virtual void menuPressed(cocos2d::CCObject * pSender);
	virtual void dropItem(CCPoint itemPos,int sprTag);

	virtual void update(float delta);

	CCSize winSize;
    CCNode *paddleNode;
    CCLabelTTF *scoreLbl;
    CCLabelTTF *stageLbl;
    int playerLifeCount;
    int brickPoints;
    
	MyPaddle* getMyPaddle();
    std::vector<Brick*> m_Bricks;
    std::vector<Brick*> hardBricks;
    std::vector<Brick*> blackBricks;
    std::list<Ball*> fireBallList;
    std::vector<b2Body*> itemToDelete;
    std::vector<CCParticleSystem*> firedEmitterVector;
    list<Item *> itemList;
	list<Ball *> ballList;
    list<Bullet *> bulletList;
  

    int fireCount;
    float randomValueForPowerToAppear;

    Item* item;
    CCLayerColor *menuLayer;
    CCLayerColor *navigationLayer;


private:
    CCParticleSystem*    m_pFireEmitter;

    ContactListener* m_contactListener;

	static Ball *ball;
    static Ball *fireBall;
    static Bullet *bulletFired;

	static MyPaddle *myPaddle;

	b2World *world;
	b2Body *groundBody;
	b2Fixture *bottomFixture;
	b2Fixture *ballFixture;
	b2Fixture *myPaddleFixture;
	b2Fixture *BrickPaddleFixture;
	b2MouseJoint *_mouseJoint;
	CCLabelTTF *scores;
    b2Vec2 velocityBeforeFrozen;

	CCMenu* pauseButton;
    CCMenuItemImage *pauseBtn;
	CCSprite* scoresLabel;

	void onEnterTransitionDidFinish();
    void onExitTransitionDidStart();

    int randomValueBetween(int low, int high);
    int counterForPower;

	void pauseAndResume(cocos2d::CCObject * pSender);
    
	bool gameIsPaused;
	bool gameIsEnded;
	//bool gameIsOver;
	bool newGame;
	bool isSkweing;
	bool freezeMode;
	bool skewDirectionIsRight;
    bool isPowerToGenerate;
    
	void enablePowerFlag();
	void enlargePaddle(Ball *ball);
	void paddleTimer();
    void fireBallTimer();
    void bulletTimer();
	void avoidUnwantedSituation();
	void reverseBallXVelocity();
	void reverseBallYVelocity();
	void freezeBall();
	void shortenPaddle(Ball *ball);
	void bonusBallLife();
	void skewBall();
	void skewTimer();
    void fireBallUpdate(float dt);
    void buildBall(std::string ballType);
	void buildMyPaddle();
	void buildBrickPaddle();
	void buildGround();
    void buildBullet(std::string bulletType);
	void restrictPaddleMovement();
	void setHighScore();
    void gameOver();
    void powerUpItems(float delta);
    void removeBullet();
    void timerForPower();
};

#endif /* GAMELAYER_H_ */

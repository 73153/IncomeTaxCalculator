

#include "SettingLayer.h"
#include "../Layers/MenuLayer.h"
#include "../Layers/MenuLayerLoader.h"
#include "../GameManager/GameManager.h"

using namespace cocos2d;
using namespace cocos2d::extension;

SettingLayer::ControlType SettingLayer::controlMode;
int SettingLayer::sensitivity;

SettingLayer::SettingLayer() {

}

SettingLayer::~SettingLayer() {
}


bool SettingLayer::init() {
	if (!CCLayer::init())
		return false;
	setKeypadEnabled(true);
	setTouchPriority(kCCMenuHandlerPriority + 1);

	this->initBackground();
	this->initControlMode();
	this->initGravitySeneitivity();
	this->initBackButton();

	return true;
}

void SettingLayer::initBackground() {

	CCSize size = CCDirector::sharedDirector()->getWinSize();

	//Background
	CCSprite* settingLayerBackground = CCSprite::create(
			"SettingSceneBackground.png");

	settingLayerBackground->setPosition(ccp(size.width / 2, size.height / 2));

	this->addChild(settingLayerBackground, 0);
}
void SettingLayer::initBackButton() {
	CCSize size = CCDirector::sharedDirector()->getWinSize();

	//Pause Button
	CCMenuItemImage *backButtonImage = CCMenuItemImage::create(
			"Back.png", "Back_Pressed.png", this,
			menu_selector(SettingLayer::backButtonPressed));
	backButtonImage->setPosition(ccp(0, 0));
	CCMenu* backButton = CCMenu::create(backButtonImage, NULL);
	backButton->setPosition(ccp(size.width / 2, size.height - 1019));
	this->addChild(backButton, 3);

}

void SettingLayer::initControlMode() {
	CCSize size = CCDirector::sharedDirector()->getWinSize();

	//Control Mode Label
	CCSprite* controlModeLabel = CCSprite::create(
			"controlModeLabel.png");

	controlModeLabel->setPosition(
			ccp((401.5 + 46.4) / 2, size.height - (394 + 360) / 2));

	this->addChild(controlModeLabel, 1);

	//Control Mode
	//Gravity
	CCMenuItemImage *controlModeGravityImage = CCMenuItemImage::create(
			"controlModeGravity.png",
			"controlModeGravity.png", this,
			menu_selector(SettingLayer::controlModeToGravity));
	controlModeGravityImage->setPosition(ccp(0, 0));
	controlModeGravity = CCMenu::create(controlModeGravityImage, NULL);
	controlModeGravity->setPosition(
			ccp(size.width / 2 - 195, size.height - 456.5));
	this->addChild(controlModeGravity, 1);

	//Drag
	CCMenuItemImage *controlModeDragImage = CCMenuItemImage::create(
			"controlModeDrag.png",
			"controlModeDrag.png", this,
			menu_selector(SettingLayer::controlModeToDrag));
	controlModeDragImage->setPosition(ccp(0, 0));
	controlModeDrag = CCMenu::create(controlModeDragImage, NULL);
	controlModeDrag->setPosition(
			ccp(size.width / 2 + 195, size.height - 456.5));
	this->addChild(controlModeDrag, 1);

	//Touch
	CCMenuItemImage *controlModeTouchImage = CCMenuItemImage::create(
			"controlModeTouch.png",
			"controlModeTouch.png", this,
			menu_selector(SettingLayer::controlModeToTouch));
	controlModeTouchImage->setPosition(ccp(0, 0));
	controlModeTouch = CCMenu::create(controlModeTouchImage, NULL);
	controlModeTouch->setPosition(ccp(size.width / 2, size.height - 456.5));
	this->addChild(controlModeTouch, 1);

	//Selector
	controlModeSelector = CCSprite::create(
			"controlModeSelector.png");

	if (controlMode == GRAVITY) {
		controlModeSelector->setPosition(controlModeGravity->getPosition());
	} else if (controlMode == TOUCH) {
		controlModeSelector->setPosition(controlModeTouch->getPosition());
	} else if (controlMode == DRAG) {
		controlModeSelector->setPosition(controlModeDrag->getPosition());
	}

	this->addChild(controlModeSelector, 2);
}
void SettingLayer::initGravitySeneitivity() {
	CCSize size = CCDirector::sharedDirector()->getWinSize();

	//Gravity Sensitivity Label
	CCSprite* gravitySensitivityLabel = CCSprite::create(
			"gravitySensitivityLabel.png");

	gravitySensitivityLabel->setPosition(
			ccp((523.2 + 46.4) / 2, size.height - (590 + 640) / 2));

	this->addChild(gravitySensitivityLabel, 1);

	//Gravity Sensitivity Control 
	gravitySensitivityControlSlider = this->sliderCtl();
	gravitySensitivityControlSlider->setPosition(
			ccp(size.width / 2, size.height - 680.5));

	this->addChild(gravitySensitivityControlSlider, 2);
}

void SettingLayer::controlModeToGravity() {
	this->setControlMode(GRAVITY);
	CCUserDefault::sharedUserDefault()->setStringForKey("ControlMode",
			"GRAVITY");

	CCPoint delta = controlModeGravity->getPosition()
			- controlModeSelector->getPosition();

	CCActionInterval* move = CCMoveBy::create(1, delta);
	CCActionInterval* move_ease_out = CCEaseElasticOut::create(
			(CCActionInterval*) (move->copy()->autorelease()));
	controlModeSelector->runAction(CCSequence::create(move_ease_out, NULL));

}

void SettingLayer::controlModeToTouch() {
	this->setControlMode(TOUCH);
	CCUserDefault::sharedUserDefault()->setStringForKey("ControlMode", "TOUCH");

	CCPoint delta = controlModeTouch->getPosition()
			- controlModeSelector->getPosition();

	CCActionInterval* move = CCMoveBy::create(1, delta);
	CCActionInterval* move_ease_out = CCEaseElasticOut::create(
			(CCActionInterval*) (move->copy()->autorelease()));

	controlModeSelector->runAction(CCSequence::create(move_ease_out, NULL));
}

void SettingLayer::controlModeToDrag() {
	this->setControlMode(DRAG);
	CCUserDefault::sharedUserDefault()->setStringForKey("ControlMode", "DRAG");

	CCPoint delta = controlModeDrag->getPosition()
			- controlModeSelector->getPosition();

	CCActionInterval* move = CCMoveBy::create(1, delta);
	CCActionInterval* move_ease_out = CCEaseElasticOut::create(
			(CCActionInterval*) (move->copy()->autorelease()));
	controlModeSelector->runAction(CCSequence::create(move_ease_out, NULL));
}

CCControlSlider* SettingLayer::sliderCtl() {

	CCControlSlider *slider = CCControlSlider::create(
			"controlSlider.png",
			"controlSliderProgress.png",
			"controlButton.png");
	slider->setMinimumValue(100);
	slider->setMaximumValue(800);
	slider->addTargetWithActionForControlEvents(this,
			cccontrol_selector(SettingLayer::sliderAction),
			CCControlEventValueChanged);

	slider->setValue(sensitivity);

	return slider;
}

void SettingLayer::sliderAction(CCObject* pSender,
		CCControlEvent controlEvent) {
	CCControlSlider* pSliderCtl = (CCControlSlider*) pSender;
	sensitivity = pSliderCtl->getValue();

}

int SettingLayer::getSensitivity() {
	return sensitivity;

}
void SettingLayer::setSensitivity(int s) {
	sensitivity = s;
}

int SettingLayer::getControlMode() {
	return controlMode;
}

void SettingLayer::setControlMode(SettingLayer::ControlType mode) {
	controlMode = mode;
}

void SettingLayer::keyBackClicked() {
	CCUserDefault::sharedUserDefault()->setIntegerForKey("Sensitivity",
			sensitivity);
    GameManager::sharedGameManager()->remove_unused_data();
    CCScene *help_scene=GameManager::sharedGameManager()->get_scene("MenuLayer.ccbi", "MenuLayer", MenuLayerLoader::loader(), CCScene::create(),false,false);
   	CCDirector::sharedDirector()->replaceScene(CCTransitionSlideInR::create(0.3,help_scene));

}

void SettingLayer::backButtonPressed() {
	CCUserDefault::sharedUserDefault()->setIntegerForKey("Sensitivity",
			sensitivity);
    GameManager::sharedGameManager()->remove_unused_data();
    CCScene *help_scene=GameManager::sharedGameManager()->get_scene("MenuLayer.ccbi", "MenuLayer", MenuLayerLoader::loader(), CCScene::create(),false,false);
   	CCDirector::sharedDirector()->replaceScene(CCTransitionSlideInR::create(0.3,help_scene));
}

bool SettingLayer::ccTouchBegan(CCTouch * pTouch, CCEvent * pEvent) {
	return true;
}
#pragma  mark   COCOSBUILDER INITITIALIZATION
void SettingLayer::onNodeLoaded(cocos2d::CCNode * pNode,  cocos2d::extension::CCNodeLoader * pNodeLoader)
{
    CCLOG("on loaded called");
    
}

SEL_CallFuncN SettingLayer::onResolveCCBCCCallFuncSelector(CCObject * pTarget, const char* pSelectorName)
{
    return NULL;
}

SEL_MenuHandler SettingLayer::onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char * pSelectorName)
{
    //    CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(this, "pause", SettingLayer::pause);
    //    CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(this, "resume", SettingLayer::resume);
    
    return NULL;
}

SEL_CCControlHandler SettingLayer::onResolveCCBCCControlSelector(CCObject * pTarget, const char * pSelectorName)
{
    return NULL;
}

bool SettingLayer::onAssignCCBMemberVariable(CCObject * pTarget, const char * pMemberVariableName, CCNode * pNode)
{
    //    CCB_MEMBERVARIABLEASSIGNER_GLUE(this, "pauseBtn",CCMenuItemImage *, this->pauseBtn);
    
    return false;
}

bool SettingLayer::onAssignCCBCustomProperty(CCObject* pTarget, const char* pMemberVariableName, cocos2d::extension::CCBValue* pCCBValue)
{
    bool bRet = false;
    return bRet;
}



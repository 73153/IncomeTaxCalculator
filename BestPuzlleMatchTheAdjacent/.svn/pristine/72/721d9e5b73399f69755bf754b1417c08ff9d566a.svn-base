#include "ContactListener.h"

ContactListener::ContactListener()
{
}
 
ContactListener::~ContactListener()
{
}


void ContactListener::BeginContact( b2Contact* contact )
{
	ContactHolder holder = ContactHolder();
    holder.fixtureA = contact->GetFixtureA();
	holder.fixtureB = contact->GetFixtureB();
    
//    //check if fixture A was a ball
//    void* bodyUserData = contact->GetFixtureA()->GetBody()->GetUserData();
//    if ( bodyUserData )
//        static_cast<Ball*>( bodyUserData )->startContact();
//    
//    //check if fixture B was a ball
//    bodyUserData = contact->GetFixtureB()->GetBody()->GetUserData();
//    if ( bodyUserData )
//        static_cast<Ball*>( bodyUserData )->startContact();
    
	contacts.push_back(holder);
}

void ContactListener::EndContact( b2Contact* contact )
{
	ContactHolder holder = ContactHolder();
	holder.fixtureA = contact->GetFixtureA();
	holder.fixtureB = contact->GetFixtureB();
	std::vector<ContactHolder>::iterator pos;
	pos = std::find( contacts.begin(), contacts.end(), holder);
	if(pos != contacts.end() )
	{
		contacts.erase(pos);
	}
}